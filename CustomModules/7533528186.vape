repeat wait() until game.Players.LocalPlayer.Character
local GuiLibrary = shared.GuiLibrary
local stepTable = {}
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:wait()

local function isAlive(player)
    local character = player.Character or player.CharacterAdded:Wait()

    if character:WaitForChild("Humanoid").Health > 1 then
        return character
    elseif character:WaitForChild("Humanoid").Health == 0 then
        return nil
    end
end

local function runcode(func)
    if func then
        func()
    end
end

local function BindToStepped(name, num, func)
	if stepTable[name] == nil then
		stepTable[name] = game:GetService("RunService").Stepped:connect(func)
	end
end
local function UnbindFromStepped(name)
	if stepTable[name] then
		stepTable[name]:Disconnect()
		stepTable[name] = nil
	end
end

game.Players.ChildAdded:connect(function(child)
    if v:IsA("Player") then
        print(v.Name .. " joined the game.")
    end
end)

runcode(function()
    local KillAll = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({
        ["Name"] = "KillAll",
        ["Function"] = function(callback)
            if callback then
                BindToStepped("KillAll", 1, function()
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v.UserId ~= game.Players.LocalPlayer.UserId then
                            local res = isAlive(v)
                            if res then
                                char:WaitForChild("HumanoidRootPart").Position = res.HumanoidRootPart.Position
                                if res.Humanoid.Health == 0 then
                                    print(res.Name .. " has been killed!")
                                end
                            else
                                print(v.Name.." is dead")
                            end
                        end
                    end
                end)
            else
                UnbindFromStepped("KillAll")
            end
        end
    })
end)